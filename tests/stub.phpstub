<?php

declare(strict_types=1);

class OC_User {
	public static function isIncognitoMode() {}
	public static function setIncognitoMode($status) {}
}

namespace OC\Hooks {
	interface Emitter {
		/**
		 * @param string $scope
		 * @param string $method
		 * @param callable $callback
		 * @return void
		 * @deprecated 18.0.0 use \OCP\EventDispatcher\IEventDispatcher::addListener
		 */
		public function listen($scope, $method, callable $callback);

		/**
		 * @param string $scope optional
		 * @param string $method optional
		 * @param callable $callback optional
		 * @return void
		 * @deprecated 18.0.0 use \OCP\EventDispatcher\IEventDispatcher::removeListener
		 */
		public function removeListener($scope = null, $method = null, callable $callback = null);
	}
}

namespace OCA\Federation {
	class TrustedServers {
		public function getServers() {
		}
		public function isTrustedServer($domainWithPort) {
		}
	}
}

namespace OCA\Viewer\Event {
	class LoadViewer extends \OCP\EventDispatcher\Event {
	}
}

namespace Doctrine\DBAL\Platforms {
	class SqlitePlatform {
	}
}

namespace OCA\Files_Sharing {
	use OCP\Files\Storage\IStorage;
	use \OCP\Share\IShare;

	abstract class SharedStorage implements IStorage {
		public function getShare(): IShare {
		}
	}
}

namespace OCA\Files_Sharing\Event {
	use \OCP\Share\IShare;

	class ShareLinkAccessedEvent extends \OCP\EventDispatcher\Event {
		public function __construct(IShare $share, string $step = '', int $errorCode = 200, string $errorMessage = '') {
		}

		public function getShare(): IShare {
		}

		public function getStep(): string {
		}

		public function getErrorCode(): int {
		}

		public function getErrorMessage(): string {
		}
	}
}

class OC_Helper {
	public static function getFileTemplateManager() {
	}
}

namespace Symfony\Component\HttpFoundation {
	class IpUtils {
		public static function checkIp(?string $requestIp, $ips) {}
	}
}

#[\Attribute(Attribute::TARGET_PARAMETER)]
class SensitiveParameter {
}

class OC_Util {
	public static function setupFS(?string $user);
	public static function tearDownFS();
}
